#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupTestEnvironment() {
  console.log('üîß Proxy-per-API-Key Test Environment Setup');
  console.log('==========================================\n');

  const envPath = path.join(__dirname, '..', '.env');
  const envExamplePath = path.join(__dirname, '..', '.env.example');

  // Check if .env already exists
  if (fs.existsSync(envPath)) {
    const overwrite = await question('‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('Please provide your test configuration:\n');

  // Get API keys
  console.log('üìã API Keys:');
  console.log('   Get your Gemini API keys from: https://makersuite.google.com/app/apikey');
  const apiKeys = await question('   Enter your API keys (comma-separated): ');

  if (!apiKeys.trim()) {
    console.log('‚ùå API keys are required for testing.');
    rl.close();
    return;
  }

  // Get proxies
  console.log('\nüåê Proxy Configuration:');
  console.log('   Supported formats:');
  console.log('   - HTTP: http://host:port');
  console.log('   - HTTPS: https://host:port');
  console.log('   - SOCKS4: socks://host:port');
  console.log('   - SOCKS5: socks5://host:port');
  const proxies = await question('   Enter your proxy URLs (comma-separated): ');

  if (!proxies.trim()) {
    console.log('‚ùå Proxies are required for testing.');
    rl.close();
    return;
  }

  // Get optional settings
  console.log('\n‚öôÔ∏è  Optional Settings:');
  const model = await question('   Test model (default: gemini-pro): ') || 'gemini-pro';
  const prompt = await question('   Test prompt (default: "Hello, how are you?"): ') || 'Hello, how are you? Please respond briefly.';

  // Validate proxy URLs
  const proxyList = proxies.split(',').map(p => p.trim());
  const invalidProxies = [];

  for (const proxy of proxyList) {
    try {
      const url = new URL(proxy);
      if (!['http:', 'https:', 'socks:', 'socks5:'].includes(url.protocol)) {
        invalidProxies.push(proxy);
      }
    } catch (e) {
      invalidProxies.push(proxy);
    }
  }

  if (invalidProxies.length > 0) {
    console.log(`\n‚ö†Ô∏è  Warning: Invalid proxy URLs detected:`);
    invalidProxies.forEach(proxy => console.log(`   - ${proxy}`));
    const proceed = await question('   Continue anyway? (y/N): ');
    if (proceed.toLowerCase() !== 'y' && proceed.toLowerCase() !== 'yes') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  // Create .env content
  const envContent = `# Proxy-per-API-Key Testing Configuration
# Generated by setup script on ${new Date().toISOString()}

# API Keys (comma-separated)
TEST_API_KEYS=${apiKeys}

# Proxy URLs (comma-separated)
TEST_PROXIES=${proxies}

# Test Configuration
TEST_MODEL=${model}
TEST_PROMPT=${prompt}

# Optional: Proxy authentication (if your proxies require it)
# PROXY_USERNAME=your_username
# PROXY_PASSWORD=your_password
`;

  // Write .env file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ Configuration saved to .env file');
    
    // Show summary
    console.log('\nüìä Configuration Summary:');
    console.log(`   API Keys: ${apiKeys.split(',').length} keys`);
    console.log(`   Proxies: ${proxyList.length} proxies`);
    console.log(`   Model: ${model}`);
    console.log(`   Prompt: "${prompt}"`);
    
    console.log('\nüöÄ Ready to test! Run:');
    console.log('   npm run test:proxy        # Interactive test runner');
    console.log('   npm run test:integration  # Full test suite');
    
  } catch (error) {
    console.log(`\n‚ùå Error writing .env file: ${error.message}`);
  }

  rl.close();
}

// Run setup if this script is executed directly
if (require.main === module) {
  setupTestEnvironment().catch(console.error);
}

module.exports = { setupTestEnvironment };